import os
import subprocess
import io
import time
import csv
import bme680  # Přidáno pro práci se senzorem BME680
from flask import Flask, render_template, request, redirect, url_for, session, Response, jsonify, send_from_directory
from datetime import datetime
from picamera import PiCamera
from PIL import Image  # Přidáno pro ořezávání obrazu
import pandas as pd  # Přidáno pro práci s daty ze senzoru
import plotly.graph_objs as go  # Přidáno pro generování grafů
import plotly.io as pio

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Globální příznak pro zastavení streamu
stop_stream = False

# Přihlašovací údaje
USERNAME = 'test'
PASSWORD = 'test'

# Cesta k souboru s logem dat ze senzoru
SENSOR_LOG_PATH = 'sensor_data_log.csv'

# Inicializace logu, pokud neexistuje
if not os.path.exists(SENSOR_LOG_PATH):
    with open(SENSOR_LOG_PATH, 'w', newline='') as csvfile:
        fieldnames = ['timestamp', 'temperature', 'humidity', 'pressure', 'iaq']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

# Funkce pro logování dat ze senzoru do CSV
def log_sensor_data(sensor_data):
    with open(SENSOR_LOG_PATH, 'a', newline='') as csvfile:
        fieldnames = ['timestamp', 'temperature', 'humidity', 'pressure', 'iaq']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        sensor_data['timestamp'] = timestamp
        writer.writerow(sensor_data)

# Funkce pro čtení dat ze senzoru BME680
def get_sensor_data():
    try:
        # Inicializace senzoru
        sensor = bme680.BME680(bme680.I2C_ADDR_PRIMARY)

        # Nastavení oversamplingu pro různé parametry
        sensor.set_humidity_oversample(bme680.OS_2X)
        sensor.set_pressure_oversample(bme680.OS_4X)
        sensor.set_temperature_oversample(bme680.OS_8X)
        sensor.set_filter(bme680.FILTER_SIZE_3)
        sensor.set_gas_status(bme680.ENABLE_GAS_MEAS)

        if sensor.get_sensor_data():
            # Čtení základních environmentálních hodnot
            sensor_data = {
                "temperature": sensor.data.temperature,
                "humidity": sensor.data.humidity,
                "pressure": sensor.data.pressure,
                "gas_resistance": sensor.data.gas_resistance  # Plynový odpor (VOC)
            }

            if sensor.data.heat_stable:
                # Pokud je stabilní zahřívání, můžeme číst IAQ index
                sensor_data["iaq"] = sensor.data.iaq_score  # IAQ index (kvalita vzduchu)
            else:
                sensor_data["iaq"] = None  # Pokud není stabilní, IAQ není dostupné

        else:
            # Pokud nejsou dostupná data
            sensor_data = {
                "temperature": None, 
                "humidity": None, 
                "pressure": None, 
                "gas_resistance": None,
                "iaq": None
            }

    except Exception as e:
        # Zpracování chyb
        print(f"Chyba při čtení senzoru: {e}")
        sensor_data = {
            "temperature": None, 
            "humidity": None, 
            "pressure": None, 
            "gas_resistance": None,
            "iaq": None
        }

    log_sensor_data(sensor_data)
    return sensor_data

# Endpoint pro získání dat ze senzoru
@app.route('/sensor_data', methods=['GET'])
def sensor_data():
    return jsonify(get_sensor_data())

# Funkce pro oříznutí obrazu pomocí Pillow
def crop_image(image_data, left, upper, right, lower):
    # Načtení obrazu z bajtů
    image = Image.open(io.BytesIO(image_data))

    # Oříznutí obrazu
    cropped_image = image.crop((left, upper, right, lower))

    # Uložení oříznutého obrazu do paměti jako bajty
    byte_array = io.BytesIO()
    cropped_image.save(byte_array, format='JPEG')

    return byte_array.getvalue()

@app.route('/home')
def home():
    # Načtení dat ze senzoru z logu
    df = pd.read_csv(SENSOR_LOG_PATH)

    # Vytvoření grafu pro teplotu
    fig_temp = go.Figure()
    fig_temp.add_trace(go.Scatter(x=df['timestamp'], y=df['temperature'], mode='lines', name='Teplota (°C)'))
    fig_temp.update_layout(title='Teplota v čase', xaxis_title='Čas', yaxis_title='Teplota (°C)', template='plotly_dark')
    temp_plot = pio.to_html(fig_temp, full_html=False)

    # Vytvoření grafu pro vlhkost
    fig_hum = go.Figure()
    fig_hum.add_trace(go.Scatter(x=df['timestamp'], y=df['humidity'], mode='lines', name='Vlhkost (%)'))
    fig_hum.update_layout(title='Vlhkost v čase', xaxis_title='Čas', yaxis_title='Vlhkost (%)', template='plotly_dark')
    hum_plot = pio.to_html(fig_hum, full_html=False)

    # Vytvoření grafu pro tlak
    fig_pres = go.Figure()
    fig_pres.add_trace(go.Scatter(x=df['timestamp'], y=df['pressure'], mode='lines', name='Tlak (hPa)'))
    fig_pres.update_layout(title='Tlak v čase', xaxis_title='Čas', yaxis_title='Tlak (hPa)', template='plotly_dark')
    pres_plot = pio.to_html(fig_pres, full_html=False)

    # Vytvoření grafu pro IAQ
    fig_iaq = go.Figure()
    fig_iaq.add_trace(go.Scatter(x=df['timestamp'], y=df['iaq'], mode='lines', name='IAQ (Kvalita vzduchu)'))
    fig_iaq.update_layout(title='Kvalita vzduchu v čase', xaxis_title='Čas', yaxis_title='IAQ', template='plotly_dark')
    iaq_plot = pio.to_html(fig_iaq, full_html=False)

    return render_template('home.html', temp_plot=temp_plot, hum_plot=hum_plot, pres_plot=pres_plot, iaq_plot=iaq_plot)

# Zbytek původního kódu zůstává stejný ...
if __name__ == "__main__":
    ensure_motion_service_running()  # Ujistíme se, že motion.service běží při spuštění aplikace
    app.run(host='192.168.1.10', port=5433, debug=True)

